(define (domain lunch)
    (:requirements :typing :hierarchy)
    (:types
        door
    )
    (:predicates
        (opened ?arg0 - door)
        (closed ?arg0 - door)
    )

    ;; tasks

    (:task inspect_door :parameters (?d - door))

    (:task check_ventilation :parameters (?d - door))

    ;; methods

    (:method m_check_ventilation_0
        :parameters (?d - door)
        :task (check_ventilation ?d)
        :subtasks (and (task0 (check_system_thoroughly ?d)))
    )

    (:method m_check_ventilation_1
        :parameters (?d - door)
        :task (check_ventilation ?d)
        :subtasks (and (task0 (assume_no_issue ?d)))
    )

    (:method m_inspect_door_0
        :parameters (?d - door)
        :task (inspect_door ?d)
        :subtasks (and
            (task0 (observe_door ?d))
            (task1 (open_door ?d))
            (task2 (close_door ?d))
        )
        :ordering (and
            (< task0 task1)
            (< task0 task2)
        )
    )

    ;; actions

    (:action observe_door
        :parameters (?d - door)
        :precondition ()
        :effect (oneof
                (and (closed ?d) (not (opened ?d)))
                (and (opened ?d) (not (closed ?d)))
        )
    )

    (:action open_door
        :parameters (?d - door)
        :precondition (and
            (closed ?d)
            (not (opened ?d))
        )
        :effect (and
            (opened ?d)
            (not (closed ?d))
        )
    )

    (:action close_door
        :parameters (?d - door)
        :precondition (and
            (opened ?d)
            (not (closed ?d))
        )
        :effect (and
            (closed ?d)
            (not (opened ?d))
        )
    )

    (:action check_system_thoroughly
        :parameters (?d - door)
        :precondition ()
        :effect ()
    )

    ;; if some specific door is open which is known to provide good ventilation, then
    ;; don't need to check ventilation systems
    (:action assume_no_issue
        :parameters (?d - door)
        :precondition (and
            (not (closed ?d))
            (opened ?d)
        )
        :effect ()
    )
)
