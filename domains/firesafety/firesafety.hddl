(define (domain firesafety)
    (:requirements :typing :hierarchy)
    (:types
        building
    )
    (:predicates
        (fire ?b - building)
        (safe ?b - building)
    )

    ;; tasks

    (:task resolve_alarm :parameters (?b - building))

    ;; methods

    (:method m_resolve_alarm_0
        :parameters (?b - building)
        :task (resolve_alarm ?b)
        :subtasks (and (task0 (call_firefighters ?b)))
    )

    (:method m_resolve_alarm_1
        :parameters (?b - building)
        :task (resolve_alarm ?b)
        :subtasks (and (task0 (ignore_alarm ?b)))
    )

    ;; actions

    (:action fire_alarm
        :parameters (?b - building)
        :precondition ()
        :effect (oneof
            (and (fire ?b) (not (safe ?b)))
            (and (safe ?b) (not (fire ?b)))
        )
    )

    (:action call_firefighters
        :parameters (?b - building)
        :precondition ()
        :effect (and (safe ?b) (not (fire ?b)))
    )

    (:action ignore_alarm
        :parameters (?b - building)
        :precondition ()
        :effect ()
    )

    (:action verify_safety
        :parameters ()
        :precondition (forall (?b - building) (safe ?b))
        :effect ()
    )
)
