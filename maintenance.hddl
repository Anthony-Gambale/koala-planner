(define (domain maintenance)
    (:requirements :typing :hierarchy)
    (:types
        door
    )
    (:predicates
        (open ?arg0 - door)
        (closed ?arg0 - door)
    )

    ;; tasks

    (:task inspect_door :parameters (?d - door))

    (:task eat_lunch :parameters ())

    ;; methods

    (:method m_eat_lunch_0
        :parameters ()
        :task (eat_lunch)
        :subtasks (and (task0 (fast_food)))
    )

    (:method m_eat_lunch_1
        :parameters ()
        :task (eat_lunch)
        :subtasks (and (task0 (packed_lunch)))
    )

    (:method m_inspect_door_0
        :parameters (?d - door)
        :task (inspect_door ?d)
        :subtasks (and
            (task0 (observe_door ?d))
            (task1 (open_door ?d))
            (task2 (close_door ?d))
        )
        :ordering (and
            (< task0 task1)
            (< task0 task2)
        )
    )

    ;; actions

    (:action observe_door
        :parameters (?d - door)
        :precondition ()
        :effect (oneof (open ?d) (closed ?d))
    )

    (:action open_door
        :parameters (?d - door)
        :precondition (closed ?d)
        :effect (and (open ?d) (not (closed ?d)))
    )

    (:action close_door
        :parameters (?d - door)
        :precondition (open ?d)
        :effect (and (closed ?d) (not (open ?d)))
    )

    (:action fast_food :parameters () :precondition () :effect ())

    (:action packed_lunch :parameters () :precondition () :effect ())
)
